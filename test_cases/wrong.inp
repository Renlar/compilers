5.123.5.0;
val a : real real ref ref = ref 2.0;

let val a = ref 2.0 val b = 3 in 
    a + b
end;

let val a = ref 5.5 in
    let val b = ref 6.0 in
        a ++ b;
        b +- a
    end;
end;

if a = 1 else a + 2;

if b - 3 then b + 5 then a;

while (!i + 10) do
(
        i := !i + 1
);

fun 5+5=6(x, y) = 
    if (x < y) then
        y + (y - x)
    else if (x = y) then 
        y + x
    else 
        DupR(x, y + x);

val 20 : int = 12 + 8;

if (a = b;) then f(x) else g(x);

[x=1 ; []];
a : !a + !b;
func(a;d;c);
if x then y;
fun test(x , y) = x + y;
(a;b;c;);

a + b;
let a+b 
in
a;
end;

val a = ref 1
val b ref 2.0;
val c : real = ref 3.3;
val d : list = ref 3.14159;
val e : int ref = 3244;
val f : int list = ref;

fun a(b:b) = (b*7);
fun c(d : real list) = 

7

[1,2,3,4
,4+1];
[,,,,];

3 > 4
27+3) < a;

ref 2
! < 7);
not (4 +5

(ref 2;

(4=5; 7*3; seven;;);

if 8=7 drop + 5 else s=7;

while do nothing;

let val a = ref 1;val b = ref 2.0;val c : real ref = ref 3.3;; in  let in x;

a(b

let x= 7.5 in x:= x+1
end;

fun junk(i : real, j : int) = 
	not blah + glah or lah;
	(hi - !bye);
	ref(3) + (let (x= ref 6;y=ref 5) im no and yes end) - ohoh + oh well;
	

int a;
f((dangle);
fun j() let ab;

while bad do ;

asfdasd +2 - 1.0 / 3 if;

fun length(y : int list) = let val not : int ref =ref 0; 
                               val p_y : int list ref =ref y  in
                              while not (!p_y = []) do
                                  ( result = !result + 1; p_y := tl(!p_y) );
                              !result
                            end;

[23,a,q,z];

let val x = 2 in x + y end

1 + + 2;

let val a = 2
    val b = 3;
in
  a + b
end;

fun abc(x ; y) = 23;

fun foo bar = bar;

val 1 = 3;
val a = 1 ref;

let val a = ref 1
in
  while !a < 2 and 3 do a := 4
end

val b = 2;
b;

1
2;

if x then y;
val empty = ();

a+!b;

a **b;
a ++ b;
a -- b;
a // b;
div a

if a < b then d

fun d a := a + a*a;

fun d(a:real) := a + a*a;

fun a(b) = 23;

fun a(b:int) = 23 * b

a myfun b;

myfun a c;

gcd(,,,);

b:=a+1;;;;;c:=b-d/b;e:=d*d;f=ref e

val a : int list ref ref list list ref = 0;
val a : int ref real ref list list ref = 0;
val a : int real list ref ref list list ref = 0;

fun length(y) = hd(x);
while do (result := !result);
let a = ref 2; b = ref 3.0 in a:= !b;
if(x) then gcd(y,x-y);

(fun foo(x: real) = x - 3);
5 (/ 2);
let val x=0; in foo end;

[let];

this should throw an error;
2 + 2


a+b
c+d;
val int;
int or;
and or;
while and;
and b;


fun gcd(a : int);
while (5>4 AND 3+2) > 2 let val b = 3 in gcd(b) end;
val c : int list = [1,2,3] :: [4,5,6]

3;

3.523;

2+3;

aVariable:=7-6;

5   *        	4   ;

6968
- 1438
;

3;

7.14;

size "string";

[2,r,[1   ,2	,3],[7/2]];

[];

(2+3);

[3] :: [2,1];

5.27 * 4 - 3 / 24;

ref var;
! varb;
hd(alist);
tl(blist)

( 3 + f );

 if (a < b) a else b;
 while (!a < b) do a := !a + 1;

gcd(a,b);
subtract(a , b);

fun OddSum(x:int) = if x = 0 then 0 else if x mod 2 = 0 then OddSum(x-1) 
else x + OddSum(x-1);
a : float 

x: int
x+2;